#include "ros/ros.h"
#include "std_msgs/String.h"
#include "std_msgs/UInt16.h"
#include "rosserial_arduino/Adc.h"
#include "sstream"
#include "unistd.h"
float angle1=0;
float angle2=0;
float angle3=0;
float go1=90;
float go2=90;
float go3=90;
float go4=2500;
float go5=0;
float a1[100000];
float a2[100000];
float a3[100000];
float b1[10]={23.95,29.88,37.86,46.04,52.39,56.76,56.76};
float v1[10]={40,35,30,30,35,40,90};
float b2[10]={7,14.96,23.19,32.66,41.18,49.42,54.88};
float v2[10]={35,25,15,15,25,35,90};
int i=0;
int j=0;
int flag1=0;
int flag2=0;
int flag3=0;
int flag4=0;
int flag5=0;
float err=0;
float sumerr=0;
float sumerr1=0;
float sumerr2=0;
float sumerr3=0;
float derr=0;
float errtemp=0;
float Pp1=0.2;
float Pp2=0.2;
float Ip=0;
float Dp=0;
float Pv=0.1;
float Iv=0;
float Dv=0;
void chatterCallback(const rosserial_arduino::AdcConstPtr& msgptr)
{  
if (flag1==0)
{
 if (a1[i]<58)
{
err=60-a1[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go1=-Pp1*err+Ip*sumerr+Dp*derr+55;
}
 else if (a1[i]>62)
{
err=60-a1[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go1=-Pp1*err+Ip*sumerr+Dp*derr+115;
}
 else 
{
flag1++;
go1=90;
}
}
else if (flag1==1)
{
if (flag2==0 || flag3==0)
{
 go1=90;
}
else
{
 if (a1[i]>30)
{
err=a1[i]-25;
sumerr1=err+sumerr1;
derr=err-errtemp;
errtemp=err;
go1=Pp2*err+Ip*sumerr+Dp*derr+115;
}
 else if (a1[i]<20)
{
err=25-a1[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-Pp2*err+Ip*sumerr+Dp*derr+55;
}
 else 
{
flag1++;
go1=90;
}
}
}
else if (flag1==2)
{
if (flag2==1 || flag3==1)
{
 go1=90;
}
 else
{
 if (a1[i]<58)
{
err=60-a1[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go1=-Pp1*err+Ip*sumerr+Dp*derr+55;
}
 else if (a1[i]>62)
{
err=60-a1[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go1=-Pp1*err+Ip*sumerr+Dp*derr+115;
}
 else 
{
flag1++;
go1=90;
}
}
}
else if (flag1==3) 
{
go1=90;
}
if (flag2==0)
{
 if (a2[i]<58)
{
err=60-a2[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-0.1*err+Ip*sumerr+Dp*derr+65;
}
 else if (a2[i]>62)
{
err=60-a2[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-0.1*err+Ip*sumerr+Dp*derr+115;
}
 else 
{
flag2++;
go2=90;
}
}
else if (flag2==1)
{
if (flag1==0 || flag3==0)
{
go2=90;
}
else
{ 
if (a2[i]>7)
{
err=a2[i]-5;
sumerr1=err+sumerr1;
derr=err-errtemp;
errtemp=err;
go2=Pp2*err+Ip*sumerr+Dp*derr+115;
}
 else if (a2[i]<-1)
{
err=5-a2[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-Pp2*err+Ip*sumerr+Dp*derr+65;
}
 else 
{
flag2++;
go2=90;
}
}
}
else if (flag2==2)
{
if (flag1==1 || flag3==1)
{
go2=90;
}
else
{ 
 if (a2[i]<40)
{
err=50-a2[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-Pp1*err+Ip*sumerr+Dp*derr+65;
}
 else if (a2[i]>60)
{
err=50-a2[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go2=-Pp1*err+Ip*sumerr+Dp*derr+115;
}
 else 
{
flag2++;
go2=90;
}
}
}
else if (flag2==3) 
{
go2=90;
}
//
//Control beam3
if (flag3==0)
{
 if (a3[i]<245)
{
err=250-a3[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go3=0.1*err+Ip*sumerr+Dp*derr+115;
}
 else if (a3[i]>255)
{
err=250-a3[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go3=Pp1*err+Ip*sumerr+Dp*derr+55;
}
 else 
{
flag3++;
go3=90;
}
}
else if (flag3==1)
{
if (flag1==1 || flag2==1)
{
go3=90;
}
else
{
 if (a3[i]>200)
{
go3=60;
}
 
 else 
{
flag3++;
go3=90;
}
}
}
else if (flag3==2)
{
if (flag1==2 || flag2==2)
{
go3=90;
}
else
{ 
if (flag4 != 9)
{  
  if (flag4 < 3)  
    {go4=2000;}
 else if(flag4 > 6)
{go4=1000;}
else {go4=1500;}
    go3=85;
    flag4++;
}
else
{
    if (a3[i]<240)
{
err=245-a3[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go3=Pp1*err+Ip*sumerr+Dp*derr+115;
}
 else if (a3[i]>250)
{
err=245-a3[i];
sumerr=err+sumerr;
derr=err-errtemp;
errtemp=err;
go3=Pp1*err+Ip*sumerr+Dp*derr+55;
}
 else 
{
flag3++;
go3=90;
}
}
}
}
else if (flag3==3)
{
go3=90;
if (flag5 != 9)
{
  if (flag5 <2) 
    {go4=1500;go5=200;}
else if (flag5 >6)
    {go4=2500;}
else {go4=2000;go5=0;}
    flag5++;
}
else
{
 if(j<3)
    {flag1=0;flag2=0;flag3=0;flag4=0;flag5=0;j++;}
else{go1=85;go2=85;go3=85;go4=2500;go5=0;}
}
}
i++;
ROS_INFO("Angle1: [%f]", angle1);
ROS_INFO("Angle2: [%f]", angle2);
ROS_INFO("Angle3: [%f]\n", angle3);
ROS_INFO("Flag1 [%d]", flag1);
ROS_INFO("Flag2 [%d]", flag2);
ROS_INFO("Flag3 [%d]", flag3);
ROS_INFO("Flag4 [%d]\n", flag4);
ROS_INFO("Go1 [%f]", go1);
ROS_INFO("Go2 [%f]", go2);
ROS_INFO("Go3 [%f]", go3);
ROS_INFO("Go4 [%f]\n", go4);
}

// %EndTag(CALLBACK)%

int main(int argc, char **argv)
{
  ros::init(argc, argv, "listener");
  ros::NodeHandle n;
  ros::Subscriber sub = n.subscribe("adc", 1000, chatterCallback);
  ros::Publisher pub = n.advertise<rosserial_arduino::Adc>("servo", 1000);
  rosserial_arduino::Adc output;
  ros::Rate r(2);
  while (ros::ok()){
	ros::spinOnce();
	output.adc1 = go1;
        output.adc2 = go2;
        output.adc3 = go3;
        output.adc4 = go4;
        output.adc5 = go5;
	pub.publish(output);
	ROS_INFO("go1 = %d",output.adc1);
        ROS_INFO("go2 = %d",output.adc2);
        ROS_INFO("go3 = %d",output.adc3);
        ROS_INFO("go4 = %d",output.adc4);
        ROS_INFO("go5 = %d",output.adc5);
	r.sleep();
  }
  return 0;
}
